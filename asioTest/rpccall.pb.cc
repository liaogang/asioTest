// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpccall.proto

#include "rpccall.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpccall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCCall_Params2Entry_DoNotUse_rpccall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpccall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCCall_ParamsEntry_DoNotUse_rpccall_2eproto;
class RPCTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPCTask> _instance;
} _RPCTask_default_instance_;
class RPCCall_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPCCall_ParamsEntry_DoNotUse> _instance;
} _RPCCall_ParamsEntry_DoNotUse_default_instance_;
class RPCCall_Params2Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPCCall_Params2Entry_DoNotUse> _instance;
} _RPCCall_Params2Entry_DoNotUse_default_instance_;
class RPCCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPCCall> _instance;
} _RPCCall_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
static void InitDefaultsscc_info_DeviceInfo_rpccall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DeviceInfo_default_instance_;
    new (ptr) ::DeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_rpccall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceInfo_rpccall_2eproto}, {}};

static void InitDefaultsscc_info_RPCCall_rpccall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RPCCall_default_instance_;
    new (ptr) ::RPCCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RPCCall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RPCCall_rpccall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RPCCall_rpccall_2eproto}, {
      &scc_info_RPCCall_ParamsEntry_DoNotUse_rpccall_2eproto.base,
      &scc_info_RPCCall_Params2Entry_DoNotUse_rpccall_2eproto.base,}};

static void InitDefaultsscc_info_RPCCall_Params2Entry_DoNotUse_rpccall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RPCCall_Params2Entry_DoNotUse_default_instance_;
    new (ptr) ::RPCCall_Params2Entry_DoNotUse();
  }
  ::RPCCall_Params2Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCCall_Params2Entry_DoNotUse_rpccall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPCCall_Params2Entry_DoNotUse_rpccall_2eproto}, {}};

static void InitDefaultsscc_info_RPCCall_ParamsEntry_DoNotUse_rpccall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RPCCall_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::RPCCall_ParamsEntry_DoNotUse();
  }
  ::RPCCall_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCCall_ParamsEntry_DoNotUse_rpccall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPCCall_ParamsEntry_DoNotUse_rpccall_2eproto}, {}};

static void InitDefaultsscc_info_RPCTask_rpccall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RPCTask_default_instance_;
    new (ptr) ::RPCTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RPCTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RPCTask_rpccall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RPCTask_rpccall_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpccall_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rpccall_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpccall_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpccall_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPCTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RPCTask, sequence_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, uri_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, cginame_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, channeltype_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, uicgi_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, host_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, payloaddata_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, cmdid_),
  PROTOBUF_FIELD_OFFSET(::RPCTask, ispush_),
  PROTOBUF_FIELD_OFFSET(::RPCCall_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RPCCall_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RPCCall_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RPCCall_ParamsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RPCCall_Params2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RPCCall_Params2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RPCCall_Params2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RPCCall_Params2Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RPCCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RPCCall, sequence_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, name_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, params_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, data_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, str_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, params2_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, data2_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, str2_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, data3_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, data4_),
  PROTOBUF_FIELD_OFFSET(::RPCCall, uint32param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, groupname_),
  PROTOBUF_FIELD_OFFSET(::DeviceInfo, devicename_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RPCTask)},
  { 14, 21, sizeof(::RPCCall_ParamsEntry_DoNotUse)},
  { 23, 30, sizeof(::RPCCall_Params2Entry_DoNotUse)},
  { 32, -1, sizeof(::RPCCall)},
  { 48, -1, sizeof(::DeviceInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RPCTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RPCCall_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RPCCall_Params2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RPCCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DeviceInfo_default_instance_),
};

const char descriptor_table_protodef_rpccall_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rrpccall.proto\"\237\001\n\007RPCTask\022\020\n\010sequence\030"
  "\001 \001(\004\022\013\n\003uri\030\002 \001(\t\022\017\n\007cgiName\030\003 \001(\t\022\023\n\013c"
  "hannelType\030\004 \001(\r\022\r\n\005uicgi\030\005 \001(\r\022\014\n\004host\030"
  "\006 \001(\t\022\023\n\013payloadData\030\007 \001(\014\022\r\n\005cmdid\030\010 \001("
  "\r\022\016\n\006isPush\030\n \001(\r\"\301\002\n\007RPCCall\022\020\n\010sequenc"
  "e\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022$\n\006params\030\003 \003(\0132\024."
  "RPCCall.ParamsEntry\022\014\n\004data\030\004 \001(\014\022\013\n\003str"
  "\030\005 \001(\t\022&\n\007params2\030\006 \003(\0132\025.RPCCall.Params"
  "2Entry\022\r\n\005data2\030\007 \001(\014\022\014\n\004str2\030\010 \001(\t\022\r\n\005d"
  "ata3\030\n \001(\014\022\r\n\005data4\030\014 \001(\014\022\023\n\013uint32Param"
  "\030\016 \001(\r\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\032.\n\014Params2Entry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\004:\0028\001\"3\n\nDeviceInfo\022\021\n\tg"
  "roupName\030\001 \001(\t\022\022\n\ndeviceName\030\002 \001(\tb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpccall_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpccall_2eproto_sccs[5] = {
  &scc_info_DeviceInfo_rpccall_2eproto.base,
  &scc_info_RPCCall_rpccall_2eproto.base,
  &scc_info_RPCCall_Params2Entry_DoNotUse_rpccall_2eproto.base,
  &scc_info_RPCCall_ParamsEntry_DoNotUse_rpccall_2eproto.base,
  &scc_info_RPCTask_rpccall_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpccall_2eproto_once;
static bool descriptor_table_rpccall_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpccall_2eproto = {
  &descriptor_table_rpccall_2eproto_initialized, descriptor_table_protodef_rpccall_2eproto, "rpccall.proto", 562,
  &descriptor_table_rpccall_2eproto_once, descriptor_table_rpccall_2eproto_sccs, descriptor_table_rpccall_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_rpccall_2eproto::offsets,
  file_level_metadata_rpccall_2eproto, 5, file_level_enum_descriptors_rpccall_2eproto, file_level_service_descriptors_rpccall_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpccall_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpccall_2eproto), true);

// ===================================================================

void RPCTask::InitAsDefaultInstance() {
}
class RPCTask::_Internal {
 public:
};

RPCTask::RPCTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RPCTask)
}
RPCTask::RPCTask(const RPCTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  cginame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cginame().empty()) {
    cginame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cginame_);
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  payloaddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payloaddata().empty()) {
    payloaddata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payloaddata_);
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&ispush_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(ispush_));
  // @@protoc_insertion_point(copy_constructor:RPCTask)
}

void RPCTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPCTask_rpccall_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cginame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payloaddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispush_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(ispush_));
}

RPCTask::~RPCTask() {
  // @@protoc_insertion_point(destructor:RPCTask)
  SharedDtor();
}

void RPCTask::SharedDtor() {
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cginame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payloaddata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPCTask& RPCTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPCTask_rpccall_2eproto.base);
  return *internal_default_instance();
}


void RPCTask::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cginame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payloaddata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ispush_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(ispush_));
  _internal_metadata_.Clear();
}

const char* RPCTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_uri(), ptr, ctx, "RPCTask.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cgiName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cginame(), ptr, ctx, "RPCTask.cgiName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channelType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          channeltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uicgi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uicgi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_host(), ptr, ctx, "RPCTask.host");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payloadData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_payloaddata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cmdid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cmdid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 isPush = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ispush_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPCTask::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequence(), target);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCTask.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  // string cgiName = 3;
  if (this->cginame().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cginame().data(), static_cast<int>(this->_internal_cginame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCTask.cgiName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cginame(), target);
  }

  // uint32 channelType = 4;
  if (this->channeltype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channeltype(), target);
  }

  // uint32 uicgi = 5;
  if (this->uicgi() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uicgi(), target);
  }

  // string host = 6;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCTask.host");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_host(), target);
  }

  // bytes payloadData = 7;
  if (this->payloaddata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_payloaddata(), target);
  }

  // uint32 cmdid = 8;
  if (this->cmdid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cmdid(), target);
  }

  // uint32 isPush = 10;
  if (this->ispush() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ispush(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCTask)
  return target;
}

size_t RPCTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 2;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string cgiName = 3;
  if (this->cginame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cginame());
  }

  // string host = 6;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // bytes payloadData = 7;
  if (this->payloaddata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payloaddata());
  }

  // uint64 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence());
  }

  // uint32 channelType = 4;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channeltype());
  }

  // uint32 uicgi = 5;
  if (this->uicgi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uicgi());
  }

  // uint32 cmdid = 8;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cmdid());
  }

  // uint32 isPush = 10;
  if (this->ispush() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ispush());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RPCTask)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPCTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RPCTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RPCTask)
    MergeFrom(*source);
  }
}

void RPCTask::MergeFrom(const RPCTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RPCTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.cginame().size() > 0) {

    cginame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cginame_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.payloaddata().size() > 0) {

    payloaddata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payloaddata_);
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.channeltype() != 0) {
    _internal_set_channeltype(from._internal_channeltype());
  }
  if (from.uicgi() != 0) {
    _internal_set_uicgi(from._internal_uicgi());
  }
  if (from.cmdid() != 0) {
    _internal_set_cmdid(from._internal_cmdid());
  }
  if (from.ispush() != 0) {
    _internal_set_ispush(from._internal_ispush());
  }
}

void RPCTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RPCTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCTask::CopyFrom(const RPCTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCTask::IsInitialized() const {
  return true;
}

void RPCTask::InternalSwap(RPCTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cginame_.Swap(&other->cginame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payloaddata_.Swap(&other->payloaddata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_, other->sequence_);
  swap(channeltype_, other->channeltype_);
  swap(uicgi_, other->uicgi_);
  swap(cmdid_, other->cmdid_);
  swap(ispush_, other->ispush_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RPCCall_ParamsEntry_DoNotUse::RPCCall_ParamsEntry_DoNotUse() {}
RPCCall_ParamsEntry_DoNotUse::RPCCall_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RPCCall_ParamsEntry_DoNotUse::MergeFrom(const RPCCall_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RPCCall_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RPCCall_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

RPCCall_Params2Entry_DoNotUse::RPCCall_Params2Entry_DoNotUse() {}
RPCCall_Params2Entry_DoNotUse::RPCCall_Params2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RPCCall_Params2Entry_DoNotUse::MergeFrom(const RPCCall_Params2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RPCCall_Params2Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RPCCall_Params2Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RPCCall::InitAsDefaultInstance() {
}
class RPCCall::_Internal {
 public:
};

RPCCall::RPCCall()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RPCCall)
}
RPCCall::RPCCall(const RPCCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  params2_.MergeFrom(from.params2_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str().empty()) {
    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data2().empty()) {
    data2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data2_);
  }
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_str2().empty()) {
    str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str2_);
  }
  data3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data3().empty()) {
    data3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data3_);
  }
  data4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data4().empty()) {
    data4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data4_);
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint32param_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(uint32param_));
  // @@protoc_insertion_point(copy_constructor:RPCCall)
}

void RPCCall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPCCall_rpccall_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint32param_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(uint32param_));
}

RPCCall::~RPCCall() {
  // @@protoc_insertion_point(destructor:RPCCall)
  SharedDtor();
}

void RPCCall::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RPCCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPCCall& RPCCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPCCall_rpccall_2eproto.base);
  return *internal_default_instance();
}


void RPCCall::Clear() {
// @@protoc_insertion_point(message_clear_start:RPCCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  params2_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint32param_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(uint32param_));
  _internal_metadata_.Clear();
}

const char* RPCCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "RPCCall.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_str(), ptr, ctx, "RPCCall.str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, uint64> params2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string str2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_str2(), ptr, ctx, "RPCCall.str2");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data3(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data4(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uint32Param = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          uint32param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPCCall::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RPCCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence = 1;
  if (this->sequence() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCCall.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // map<string, string> params = 3;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RPCCall.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RPCCall.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RPCCall_ParamsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = RPCCall_ParamsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // string str = 5;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCCall.str");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_str(), target);
  }

  // map<string, uint64> params2 = 6;
  if (!this->_internal_params2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RPCCall.Params2Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_params2().begin();
          it != this->_internal_params2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RPCCall_Params2Entry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
          it = this->_internal_params2().begin();
          it != this->_internal_params2().end(); ++it) {
        target = RPCCall_Params2Entry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes data2 = 7;
  if (this->data2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data2(), target);
  }

  // string str2 = 8;
  if (this->str2().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str2().data(), static_cast<int>(this->_internal_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RPCCall.str2");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_str2(), target);
  }

  // bytes data3 = 10;
  if (this->data3().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_data3(), target);
  }

  // bytes data4 = 12;
  if (this->data4().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_data4(), target);
  }

  // uint32 uint32Param = 14;
  if (this->uint32param() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_uint32param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RPCCall)
  return target;
}

size_t RPCCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RPCCall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += RPCCall_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint64> params2 = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >::const_iterator
      it = this->_internal_params2().begin();
      it != this->_internal_params2().end(); ++it) {
    total_size += RPCCall_Params2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string str = 5;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  // bytes data2 = 7;
  if (this->data2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data2());
  }

  // string str2 = 8;
  if (this->str2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str2());
  }

  // bytes data3 = 10;
  if (this->data3().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data3());
  }

  // bytes data4 = 12;
  if (this->data4().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data4());
  }

  // uint32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  // uint32 uint32Param = 14;
  if (this->uint32param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uint32param());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RPCCall)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPCCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RPCCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RPCCall)
    MergeFrom(*source);
  }
}

void RPCCall::MergeFrom(const RPCCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RPCCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  params2_.MergeFrom(from.params2_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.data2().size() > 0) {

    data2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data2_);
  }
  if (from.str2().size() > 0) {

    str2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str2_);
  }
  if (from.data3().size() > 0) {

    data3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data3_);
  }
  if (from.data4().size() > 0) {

    data4_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data4_);
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.uint32param() != 0) {
    _internal_set_uint32param(from._internal_uint32param());
  }
}

void RPCCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RPCCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCCall::CopyFrom(const RPCCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RPCCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCCall::IsInitialized() const {
  return true;
}

void RPCCall::InternalSwap(RPCCall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.Swap(&other->params_);
  params2_.Swap(&other->params2_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data2_.Swap(&other->data2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str2_.Swap(&other->str2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data3_.Swap(&other->data3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data4_.Swap(&other->data4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequence_, other->sequence_);
  swap(uint32param_, other->uint32param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupname().empty()) {
    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicename().empty()) {
    devicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  // @@protoc_insertion_point(copy_constructor:DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInfo_rpccall_2eproto.base);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfo_rpccall_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string groupName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_groupname(), ptr, ctx, "DeviceInfo.groupName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_devicename(), ptr, ctx, "DeviceInfo.deviceName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string groupName = 1;
  if (this->groupname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.groupName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_groupname(), target);
  }

  // string deviceName = 2;
  if (this->devicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DeviceInfo.deviceName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_devicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string groupName = 1;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupname());
  }

  // string deviceName = 2;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groupname_.Swap(&other->groupname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  devicename_.Swap(&other->devicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RPCTask* Arena::CreateMaybeMessage< ::RPCTask >(Arena* arena) {
  return Arena::CreateInternal< ::RPCTask >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCCall_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::RPCCall_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::RPCCall_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCCall_Params2Entry_DoNotUse* Arena::CreateMaybeMessage< ::RPCCall_Params2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::RPCCall_Params2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RPCCall* Arena::CreateMaybeMessage< ::RPCCall >(Arena* arena) {
  return Arena::CreateInternal< ::RPCCall >(arena);
}
template<> PROTOBUF_NOINLINE ::DeviceInfo* Arena::CreateMaybeMessage< ::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::DeviceInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
