// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpccall.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpccall_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpccall_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpccall_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpccall_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpccall_2eproto;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class RPCCall;
class RPCCallDefaultTypeInternal;
extern RPCCallDefaultTypeInternal _RPCCall_default_instance_;
class RPCCall_Params2Entry_DoNotUse;
class RPCCall_Params2Entry_DoNotUseDefaultTypeInternal;
extern RPCCall_Params2Entry_DoNotUseDefaultTypeInternal _RPCCall_Params2Entry_DoNotUse_default_instance_;
class RPCCall_ParamsEntry_DoNotUse;
class RPCCall_ParamsEntry_DoNotUseDefaultTypeInternal;
extern RPCCall_ParamsEntry_DoNotUseDefaultTypeInternal _RPCCall_ParamsEntry_DoNotUse_default_instance_;
class RPCTask;
class RPCTaskDefaultTypeInternal;
extern RPCTaskDefaultTypeInternal _RPCTask_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DeviceInfo* Arena::CreateMaybeMessage<::DeviceInfo>(Arena*);
template<> ::RPCCall* Arena::CreateMaybeMessage<::RPCCall>(Arena*);
template<> ::RPCCall_Params2Entry_DoNotUse* Arena::CreateMaybeMessage<::RPCCall_Params2Entry_DoNotUse>(Arena*);
template<> ::RPCCall_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::RPCCall_ParamsEntry_DoNotUse>(Arena*);
template<> ::RPCTask* Arena::CreateMaybeMessage<::RPCTask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RPCTask :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCTask) */ {
 public:
  RPCTask();
  virtual ~RPCTask();

  RPCTask(const RPCTask& from);
  RPCTask(RPCTask&& from) noexcept
    : RPCTask() {
    *this = ::std::move(from);
  }

  inline RPCTask& operator=(const RPCTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCTask& operator=(RPCTask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPCTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCTask* internal_default_instance() {
    return reinterpret_cast<const RPCTask*>(
               &_RPCTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RPCTask& a, RPCTask& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCTask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPCTask* New() const final {
    return CreateMaybeMessage<RPCTask>(nullptr);
  }

  RPCTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPCTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPCTask& from);
  void MergeFrom(const RPCTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RPCTask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpccall_2eproto);
    return ::descriptor_table_rpccall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 2,
    kCgiNameFieldNumber = 3,
    kHostFieldNumber = 6,
    kPayloadDataFieldNumber = 7,
    kSequenceFieldNumber = 1,
    kChannelTypeFieldNumber = 4,
    kUicgiFieldNumber = 5,
    kCmdidFieldNumber = 8,
    kIsPushFieldNumber = 10,
  };
  // string uri = 2;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string cgiName = 3;
  void clear_cginame();
  const std::string& cginame() const;
  void set_cginame(const std::string& value);
  void set_cginame(std::string&& value);
  void set_cginame(const char* value);
  void set_cginame(const char* value, size_t size);
  std::string* mutable_cginame();
  std::string* release_cginame();
  void set_allocated_cginame(std::string* cginame);
  private:
  const std::string& _internal_cginame() const;
  void _internal_set_cginame(const std::string& value);
  std::string* _internal_mutable_cginame();
  public:

  // string host = 6;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // bytes payloadData = 7;
  void clear_payloaddata();
  const std::string& payloaddata() const;
  void set_payloaddata(const std::string& value);
  void set_payloaddata(std::string&& value);
  void set_payloaddata(const char* value);
  void set_payloaddata(const void* value, size_t size);
  std::string* mutable_payloaddata();
  std::string* release_payloaddata();
  void set_allocated_payloaddata(std::string* payloaddata);
  private:
  const std::string& _internal_payloaddata() const;
  void _internal_set_payloaddata(const std::string& value);
  std::string* _internal_mutable_payloaddata();
  public:

  // uint64 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 channelType = 4;
  void clear_channeltype();
  ::PROTOBUF_NAMESPACE_ID::uint32 channeltype() const;
  void set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channeltype() const;
  void _internal_set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uicgi = 5;
  void clear_uicgi();
  ::PROTOBUF_NAMESPACE_ID::uint32 uicgi() const;
  void set_uicgi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uicgi() const;
  void _internal_set_uicgi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cmdid = 8;
  void clear_cmdid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdid() const;
  void set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmdid() const;
  void _internal_set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 isPush = 10;
  void clear_ispush();
  ::PROTOBUF_NAMESPACE_ID::uint32 ispush() const;
  void set_ispush(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ispush() const;
  void _internal_set_ispush(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RPCTask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cginame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payloaddata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channeltype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uicgi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ispush_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpccall_2eproto;
};
// -------------------------------------------------------------------

class RPCCall_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RPCCall_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RPCCall_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RPCCall_ParamsEntry_DoNotUse();
  RPCCall_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RPCCall_ParamsEntry_DoNotUse& other);
  static const RPCCall_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RPCCall_ParamsEntry_DoNotUse*>(&_RPCCall_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RPCCall.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RPCCall.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpccall_2eproto);
    return ::descriptor_table_rpccall_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class RPCCall_Params2Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RPCCall_Params2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RPCCall_Params2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  RPCCall_Params2Entry_DoNotUse();
  RPCCall_Params2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RPCCall_Params2Entry_DoNotUse& other);
  static const RPCCall_Params2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RPCCall_Params2Entry_DoNotUse*>(&_RPCCall_Params2Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RPCCall.Params2Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpccall_2eproto);
    return ::descriptor_table_rpccall_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class RPCCall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RPCCall) */ {
 public:
  RPCCall();
  virtual ~RPCCall();

  RPCCall(const RPCCall& from);
  RPCCall(RPCCall&& from) noexcept
    : RPCCall() {
    *this = ::std::move(from);
  }

  inline RPCCall& operator=(const RPCCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCCall& operator=(RPCCall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPCCall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCCall* internal_default_instance() {
    return reinterpret_cast<const RPCCall*>(
               &_RPCCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RPCCall& a, RPCCall& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCCall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPCCall* New() const final {
    return CreateMaybeMessage<RPCCall>(nullptr);
  }

  RPCCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPCCall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPCCall& from);
  void MergeFrom(const RPCCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCCall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RPCCall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpccall_2eproto);
    return ::descriptor_table_rpccall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kParams2FieldNumber = 6,
    kNameFieldNumber = 2,
    kDataFieldNumber = 4,
    kStrFieldNumber = 5,
    kData2FieldNumber = 7,
    kStr2FieldNumber = 8,
    kData3FieldNumber = 10,
    kData4FieldNumber = 12,
    kSequenceFieldNumber = 1,
    kUint32ParamFieldNumber = 14,
  };
  // map<string, string> params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // map<string, uint64> params2 = 6;
  int params2_size() const;
  private:
  int _internal_params2_size() const;
  public:
  void clear_params2();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_params2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_params2();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      params2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_params2();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string str = 5;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // bytes data2 = 7;
  void clear_data2();
  const std::string& data2() const;
  void set_data2(const std::string& value);
  void set_data2(std::string&& value);
  void set_data2(const char* value);
  void set_data2(const void* value, size_t size);
  std::string* mutable_data2();
  std::string* release_data2();
  void set_allocated_data2(std::string* data2);
  private:
  const std::string& _internal_data2() const;
  void _internal_set_data2(const std::string& value);
  std::string* _internal_mutable_data2();
  public:

  // string str2 = 8;
  void clear_str2();
  const std::string& str2() const;
  void set_str2(const std::string& value);
  void set_str2(std::string&& value);
  void set_str2(const char* value);
  void set_str2(const char* value, size_t size);
  std::string* mutable_str2();
  std::string* release_str2();
  void set_allocated_str2(std::string* str2);
  private:
  const std::string& _internal_str2() const;
  void _internal_set_str2(const std::string& value);
  std::string* _internal_mutable_str2();
  public:

  // bytes data3 = 10;
  void clear_data3();
  const std::string& data3() const;
  void set_data3(const std::string& value);
  void set_data3(std::string&& value);
  void set_data3(const char* value);
  void set_data3(const void* value, size_t size);
  std::string* mutable_data3();
  std::string* release_data3();
  void set_allocated_data3(std::string* data3);
  private:
  const std::string& _internal_data3() const;
  void _internal_set_data3(const std::string& value);
  std::string* _internal_mutable_data3();
  public:

  // bytes data4 = 12;
  void clear_data4();
  const std::string& data4() const;
  void set_data4(const std::string& value);
  void set_data4(std::string&& value);
  void set_data4(const char* value);
  void set_data4(const void* value, size_t size);
  std::string* mutable_data4();
  std::string* release_data4();
  void set_allocated_data4(std::string* data4);
  private:
  const std::string& _internal_data4() const;
  void _internal_set_data4(const std::string& value);
  std::string* _internal_mutable_data4();
  public:

  // uint32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uint32Param = 14;
  void clear_uint32param();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32param() const;
  void set_uint32param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32param() const;
  void _internal_set_uint32param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RPCCall)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RPCCall_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RPCCall_Params2Entry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      0 > params2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpccall_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpccall_2eproto);
    return ::descriptor_table_rpccall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
  };
  // string groupName = 1;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // string deviceName = 2;
  void clear_devicename();
  const std::string& devicename() const;
  void set_devicename(const std::string& value);
  void set_devicename(std::string&& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  std::string* mutable_devicename();
  std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // @@protoc_insertion_point(class_scope:DeviceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpccall_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCTask

// uint64 sequence = 1;
inline void RPCTask::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPCTask::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RPCTask::sequence() const {
  // @@protoc_insertion_point(field_get:RPCTask.sequence)
  return _internal_sequence();
}
inline void RPCTask::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_ = value;
}
inline void RPCTask::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:RPCTask.sequence)
}

// string uri = 2;
inline void RPCTask::clear_uri() {
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCTask::uri() const {
  // @@protoc_insertion_point(field_get:RPCTask.uri)
  return _internal_uri();
}
inline void RPCTask::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:RPCTask.uri)
}
inline std::string* RPCTask::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:RPCTask.uri)
  return _internal_mutable_uri();
}
inline const std::string& RPCTask::_internal_uri() const {
  return uri_.GetNoArena();
}
inline void RPCTask::_internal_set_uri(const std::string& value) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCTask::set_uri(std::string&& value) {
  
  uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCTask.uri)
}
inline void RPCTask::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCTask.uri)
}
inline void RPCTask::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCTask.uri)
}
inline std::string* RPCTask::_internal_mutable_uri() {
  
  return uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCTask::release_uri() {
  // @@protoc_insertion_point(field_release:RPCTask.uri)
  
  return uri_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCTask::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:RPCTask.uri)
}

// string cgiName = 3;
inline void RPCTask::clear_cginame() {
  cginame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCTask::cginame() const {
  // @@protoc_insertion_point(field_get:RPCTask.cgiName)
  return _internal_cginame();
}
inline void RPCTask::set_cginame(const std::string& value) {
  _internal_set_cginame(value);
  // @@protoc_insertion_point(field_set:RPCTask.cgiName)
}
inline std::string* RPCTask::mutable_cginame() {
  // @@protoc_insertion_point(field_mutable:RPCTask.cgiName)
  return _internal_mutable_cginame();
}
inline const std::string& RPCTask::_internal_cginame() const {
  return cginame_.GetNoArena();
}
inline void RPCTask::_internal_set_cginame(const std::string& value) {
  
  cginame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCTask::set_cginame(std::string&& value) {
  
  cginame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCTask.cgiName)
}
inline void RPCTask::set_cginame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cginame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCTask.cgiName)
}
inline void RPCTask::set_cginame(const char* value, size_t size) {
  
  cginame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCTask.cgiName)
}
inline std::string* RPCTask::_internal_mutable_cginame() {
  
  return cginame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCTask::release_cginame() {
  // @@protoc_insertion_point(field_release:RPCTask.cgiName)
  
  return cginame_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCTask::set_allocated_cginame(std::string* cginame) {
  if (cginame != nullptr) {
    
  } else {
    
  }
  cginame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cginame);
  // @@protoc_insertion_point(field_set_allocated:RPCTask.cgiName)
}

// uint32 channelType = 4;
inline void RPCTask::clear_channeltype() {
  channeltype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::_internal_channeltype() const {
  return channeltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::channeltype() const {
  // @@protoc_insertion_point(field_get:RPCTask.channelType)
  return _internal_channeltype();
}
inline void RPCTask::_internal_set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channeltype_ = value;
}
inline void RPCTask::set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:RPCTask.channelType)
}

// uint32 uicgi = 5;
inline void RPCTask::clear_uicgi() {
  uicgi_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::_internal_uicgi() const {
  return uicgi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::uicgi() const {
  // @@protoc_insertion_point(field_get:RPCTask.uicgi)
  return _internal_uicgi();
}
inline void RPCTask::_internal_set_uicgi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uicgi_ = value;
}
inline void RPCTask::set_uicgi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uicgi(value);
  // @@protoc_insertion_point(field_set:RPCTask.uicgi)
}

// string host = 6;
inline void RPCTask::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCTask::host() const {
  // @@protoc_insertion_point(field_get:RPCTask.host)
  return _internal_host();
}
inline void RPCTask::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:RPCTask.host)
}
inline std::string* RPCTask::mutable_host() {
  // @@protoc_insertion_point(field_mutable:RPCTask.host)
  return _internal_mutable_host();
}
inline const std::string& RPCTask::_internal_host() const {
  return host_.GetNoArena();
}
inline void RPCTask::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCTask::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCTask.host)
}
inline void RPCTask::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCTask.host)
}
inline void RPCTask::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCTask.host)
}
inline std::string* RPCTask::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCTask::release_host() {
  // @@protoc_insertion_point(field_release:RPCTask.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCTask::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:RPCTask.host)
}

// bytes payloadData = 7;
inline void RPCTask::clear_payloaddata() {
  payloaddata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCTask::payloaddata() const {
  // @@protoc_insertion_point(field_get:RPCTask.payloadData)
  return _internal_payloaddata();
}
inline void RPCTask::set_payloaddata(const std::string& value) {
  _internal_set_payloaddata(value);
  // @@protoc_insertion_point(field_set:RPCTask.payloadData)
}
inline std::string* RPCTask::mutable_payloaddata() {
  // @@protoc_insertion_point(field_mutable:RPCTask.payloadData)
  return _internal_mutable_payloaddata();
}
inline const std::string& RPCTask::_internal_payloaddata() const {
  return payloaddata_.GetNoArena();
}
inline void RPCTask::_internal_set_payloaddata(const std::string& value) {
  
  payloaddata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCTask::set_payloaddata(std::string&& value) {
  
  payloaddata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCTask.payloadData)
}
inline void RPCTask::set_payloaddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payloaddata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCTask.payloadData)
}
inline void RPCTask::set_payloaddata(const void* value, size_t size) {
  
  payloaddata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCTask.payloadData)
}
inline std::string* RPCTask::_internal_mutable_payloaddata() {
  
  return payloaddata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCTask::release_payloaddata() {
  // @@protoc_insertion_point(field_release:RPCTask.payloadData)
  
  return payloaddata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCTask::set_allocated_payloaddata(std::string* payloaddata) {
  if (payloaddata != nullptr) {
    
  } else {
    
  }
  payloaddata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payloaddata);
  // @@protoc_insertion_point(field_set_allocated:RPCTask.payloadData)
}

// uint32 cmdid = 8;
inline void RPCTask::clear_cmdid() {
  cmdid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::_internal_cmdid() const {
  return cmdid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::cmdid() const {
  // @@protoc_insertion_point(field_get:RPCTask.cmdid)
  return _internal_cmdid();
}
inline void RPCTask::_internal_set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmdid_ = value;
}
inline void RPCTask::set_cmdid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmdid(value);
  // @@protoc_insertion_point(field_set:RPCTask.cmdid)
}

// uint32 isPush = 10;
inline void RPCTask::clear_ispush() {
  ispush_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::_internal_ispush() const {
  return ispush_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCTask::ispush() const {
  // @@protoc_insertion_point(field_get:RPCTask.isPush)
  return _internal_ispush();
}
inline void RPCTask::_internal_set_ispush(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ispush_ = value;
}
inline void RPCTask::set_ispush(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ispush(value);
  // @@protoc_insertion_point(field_set:RPCTask.isPush)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RPCCall

// uint32 sequence = 1;
inline void RPCCall::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCCall::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCCall::sequence() const {
  // @@protoc_insertion_point(field_get:RPCCall.sequence)
  return _internal_sequence();
}
inline void RPCCall::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void RPCCall::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:RPCCall.sequence)
}

// string name = 2;
inline void RPCCall::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCCall::name() const {
  // @@protoc_insertion_point(field_get:RPCCall.name)
  return _internal_name();
}
inline void RPCCall::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:RPCCall.name)
}
inline std::string* RPCCall::mutable_name() {
  // @@protoc_insertion_point(field_mutable:RPCCall.name)
  return _internal_mutable_name();
}
inline const std::string& RPCCall::_internal_name() const {
  return name_.GetNoArena();
}
inline void RPCCall::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCCall::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCCall.name)
}
inline void RPCCall::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCCall.name)
}
inline void RPCCall::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCCall.name)
}
inline std::string* RPCCall::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCCall::release_name() {
  // @@protoc_insertion_point(field_release:RPCCall.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCall::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RPCCall.name)
}

// map<string, string> params = 3;
inline int RPCCall::_internal_params_size() const {
  return params_.size();
}
inline int RPCCall::params_size() const {
  return _internal_params_size();
}
inline void RPCCall::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RPCCall::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RPCCall::params() const {
  // @@protoc_insertion_point(field_map:RPCCall.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RPCCall::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RPCCall::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:RPCCall.params)
  return _internal_mutable_params();
}

// bytes data = 4;
inline void RPCCall::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCCall::data() const {
  // @@protoc_insertion_point(field_get:RPCCall.data)
  return _internal_data();
}
inline void RPCCall::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:RPCCall.data)
}
inline std::string* RPCCall::mutable_data() {
  // @@protoc_insertion_point(field_mutable:RPCCall.data)
  return _internal_mutable_data();
}
inline const std::string& RPCCall::_internal_data() const {
  return data_.GetNoArena();
}
inline void RPCCall::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCCall::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCCall.data)
}
inline void RPCCall::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCCall.data)
}
inline void RPCCall::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCCall.data)
}
inline std::string* RPCCall::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCCall::release_data() {
  // @@protoc_insertion_point(field_release:RPCCall.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCall::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:RPCCall.data)
}

// string str = 5;
inline void RPCCall::clear_str() {
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCCall::str() const {
  // @@protoc_insertion_point(field_get:RPCCall.str)
  return _internal_str();
}
inline void RPCCall::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:RPCCall.str)
}
inline std::string* RPCCall::mutable_str() {
  // @@protoc_insertion_point(field_mutable:RPCCall.str)
  return _internal_mutable_str();
}
inline const std::string& RPCCall::_internal_str() const {
  return str_.GetNoArena();
}
inline void RPCCall::_internal_set_str(const std::string& value) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCCall::set_str(std::string&& value) {
  
  str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCCall.str)
}
inline void RPCCall::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCCall.str)
}
inline void RPCCall::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCCall.str)
}
inline std::string* RPCCall::_internal_mutable_str() {
  
  return str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCCall::release_str() {
  // @@protoc_insertion_point(field_release:RPCCall.str)
  
  return str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCall::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:RPCCall.str)
}

// map<string, uint64> params2 = 6;
inline int RPCCall::_internal_params2_size() const {
  return params2_.size();
}
inline int RPCCall::params2_size() const {
  return _internal_params2_size();
}
inline void RPCCall::clear_params2() {
  params2_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
RPCCall::_internal_params2() const {
  return params2_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
RPCCall::params2() const {
  // @@protoc_insertion_point(field_map:RPCCall.params2)
  return _internal_params2();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
RPCCall::_internal_mutable_params2() {
  return params2_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
RPCCall::mutable_params2() {
  // @@protoc_insertion_point(field_mutable_map:RPCCall.params2)
  return _internal_mutable_params2();
}

// bytes data2 = 7;
inline void RPCCall::clear_data2() {
  data2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCCall::data2() const {
  // @@protoc_insertion_point(field_get:RPCCall.data2)
  return _internal_data2();
}
inline void RPCCall::set_data2(const std::string& value) {
  _internal_set_data2(value);
  // @@protoc_insertion_point(field_set:RPCCall.data2)
}
inline std::string* RPCCall::mutable_data2() {
  // @@protoc_insertion_point(field_mutable:RPCCall.data2)
  return _internal_mutable_data2();
}
inline const std::string& RPCCall::_internal_data2() const {
  return data2_.GetNoArena();
}
inline void RPCCall::_internal_set_data2(const std::string& value) {
  
  data2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCCall::set_data2(std::string&& value) {
  
  data2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCCall.data2)
}
inline void RPCCall::set_data2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCCall.data2)
}
inline void RPCCall::set_data2(const void* value, size_t size) {
  
  data2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCCall.data2)
}
inline std::string* RPCCall::_internal_mutable_data2() {
  
  return data2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCCall::release_data2() {
  // @@protoc_insertion_point(field_release:RPCCall.data2)
  
  return data2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCall::set_allocated_data2(std::string* data2) {
  if (data2 != nullptr) {
    
  } else {
    
  }
  data2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data2);
  // @@protoc_insertion_point(field_set_allocated:RPCCall.data2)
}

// string str2 = 8;
inline void RPCCall::clear_str2() {
  str2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCCall::str2() const {
  // @@protoc_insertion_point(field_get:RPCCall.str2)
  return _internal_str2();
}
inline void RPCCall::set_str2(const std::string& value) {
  _internal_set_str2(value);
  // @@protoc_insertion_point(field_set:RPCCall.str2)
}
inline std::string* RPCCall::mutable_str2() {
  // @@protoc_insertion_point(field_mutable:RPCCall.str2)
  return _internal_mutable_str2();
}
inline const std::string& RPCCall::_internal_str2() const {
  return str2_.GetNoArena();
}
inline void RPCCall::_internal_set_str2(const std::string& value) {
  
  str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCCall::set_str2(std::string&& value) {
  
  str2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCCall.str2)
}
inline void RPCCall::set_str2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCCall.str2)
}
inline void RPCCall::set_str2(const char* value, size_t size) {
  
  str2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCCall.str2)
}
inline std::string* RPCCall::_internal_mutable_str2() {
  
  return str2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCCall::release_str2() {
  // @@protoc_insertion_point(field_release:RPCCall.str2)
  
  return str2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCall::set_allocated_str2(std::string* str2) {
  if (str2 != nullptr) {
    
  } else {
    
  }
  str2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str2);
  // @@protoc_insertion_point(field_set_allocated:RPCCall.str2)
}

// bytes data3 = 10;
inline void RPCCall::clear_data3() {
  data3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCCall::data3() const {
  // @@protoc_insertion_point(field_get:RPCCall.data3)
  return _internal_data3();
}
inline void RPCCall::set_data3(const std::string& value) {
  _internal_set_data3(value);
  // @@protoc_insertion_point(field_set:RPCCall.data3)
}
inline std::string* RPCCall::mutable_data3() {
  // @@protoc_insertion_point(field_mutable:RPCCall.data3)
  return _internal_mutable_data3();
}
inline const std::string& RPCCall::_internal_data3() const {
  return data3_.GetNoArena();
}
inline void RPCCall::_internal_set_data3(const std::string& value) {
  
  data3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCCall::set_data3(std::string&& value) {
  
  data3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCCall.data3)
}
inline void RPCCall::set_data3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCCall.data3)
}
inline void RPCCall::set_data3(const void* value, size_t size) {
  
  data3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCCall.data3)
}
inline std::string* RPCCall::_internal_mutable_data3() {
  
  return data3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCCall::release_data3() {
  // @@protoc_insertion_point(field_release:RPCCall.data3)
  
  return data3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCall::set_allocated_data3(std::string* data3) {
  if (data3 != nullptr) {
    
  } else {
    
  }
  data3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data3);
  // @@protoc_insertion_point(field_set_allocated:RPCCall.data3)
}

// bytes data4 = 12;
inline void RPCCall::clear_data4() {
  data4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RPCCall::data4() const {
  // @@protoc_insertion_point(field_get:RPCCall.data4)
  return _internal_data4();
}
inline void RPCCall::set_data4(const std::string& value) {
  _internal_set_data4(value);
  // @@protoc_insertion_point(field_set:RPCCall.data4)
}
inline std::string* RPCCall::mutable_data4() {
  // @@protoc_insertion_point(field_mutable:RPCCall.data4)
  return _internal_mutable_data4();
}
inline const std::string& RPCCall::_internal_data4() const {
  return data4_.GetNoArena();
}
inline void RPCCall::_internal_set_data4(const std::string& value) {
  
  data4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RPCCall::set_data4(std::string&& value) {
  
  data4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPCCall.data4)
}
inline void RPCCall::set_data4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPCCall.data4)
}
inline void RPCCall::set_data4(const void* value, size_t size) {
  
  data4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPCCall.data4)
}
inline std::string* RPCCall::_internal_mutable_data4() {
  
  return data4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RPCCall::release_data4() {
  // @@protoc_insertion_point(field_release:RPCCall.data4)
  
  return data4_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RPCCall::set_allocated_data4(std::string* data4) {
  if (data4 != nullptr) {
    
  } else {
    
  }
  data4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data4);
  // @@protoc_insertion_point(field_set_allocated:RPCCall.data4)
}

// uint32 uint32Param = 14;
inline void RPCCall::clear_uint32param() {
  uint32param_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCCall::_internal_uint32param() const {
  return uint32param_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RPCCall::uint32param() const {
  // @@protoc_insertion_point(field_get:RPCCall.uint32Param)
  return _internal_uint32param();
}
inline void RPCCall::_internal_set_uint32param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uint32param_ = value;
}
inline void RPCCall::set_uint32param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32param(value);
  // @@protoc_insertion_point(field_set:RPCCall.uint32Param)
}

// -------------------------------------------------------------------

// DeviceInfo

// string groupName = 1;
inline void DeviceInfo::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::groupname() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.groupName)
  return _internal_groupname();
}
inline void DeviceInfo::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:DeviceInfo.groupName)
}
inline std::string* DeviceInfo::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:DeviceInfo.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& DeviceInfo::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void DeviceInfo::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeviceInfo::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.groupName)
}
inline void DeviceInfo::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.groupName)
}
inline void DeviceInfo::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.groupName)
}
inline std::string* DeviceInfo::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:DeviceInfo.groupName)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.groupName)
}

// string deviceName = 2;
inline void DeviceInfo::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::devicename() const {
  // @@protoc_insertion_point(field_get:DeviceInfo.deviceName)
  return _internal_devicename();
}
inline void DeviceInfo::set_devicename(const std::string& value) {
  _internal_set_devicename(value);
  // @@protoc_insertion_point(field_set:DeviceInfo.deviceName)
}
inline std::string* DeviceInfo::mutable_devicename() {
  // @@protoc_insertion_point(field_mutable:DeviceInfo.deviceName)
  return _internal_mutable_devicename();
}
inline const std::string& DeviceInfo::_internal_devicename() const {
  return devicename_.GetNoArena();
}
inline void DeviceInfo::_internal_set_devicename(const std::string& value) {
  
  devicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeviceInfo::set_devicename(std::string&& value) {
  
  devicename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeviceInfo.deviceName)
}
inline void DeviceInfo::set_devicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceInfo.deviceName)
}
inline void DeviceInfo::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceInfo.deviceName)
}
inline std::string* DeviceInfo::_internal_mutable_devicename() {
  
  return devicename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_devicename() {
  // @@protoc_insertion_point(field_release:DeviceInfo.deviceName)
  
  return devicename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:DeviceInfo.deviceName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpccall_2eproto
